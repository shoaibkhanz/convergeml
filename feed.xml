<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>convergeML</title>
    <description>converge to better learning</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 08 Jun 2020 13:32:51 -0400</pubDate>
    <lastBuildDate>Mon, 08 Jun 2020 13:32:51 -0400</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>Time-Series Forecasting using Prophet- part2</title>
        <description>&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_23.svg&quot; /&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;In&lt;/span&gt;  the last post, we learned that we can build a simple Prophet model by combining &lt;span style=&quot;color:#ea9808;&quot;&gt;trend&lt;/span&gt; and &lt;span style=&quot;color:#ea9808;&quot;&gt;seasonality&lt;/span&gt; to forecast the future. We saw, that in the model equation not only can we add those factors but we can also include &lt;span style=&quot;color:#ea9808;&quot;&gt;holidays effects&lt;/span&gt; and &lt;span style=&quot;color:#ea9808;&quot;&gt;extra regressors&lt;/span&gt;, which makes it extremely powerful. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Let’s just remind ourselves how this looks like.&lt;/p&gt;

\[\hat Y_t  = g_t + s_t + h_t + x_t + \epsilon\]

&lt;p&gt;\(\hat Y_t\)  are the predictions.&lt;/p&gt;

&lt;p&gt;\(g_t\) stands for growth model i.e. trend (logistic/linear)&lt;/p&gt;

&lt;p&gt;\(s_t\) model seasonality using Fourier series&lt;/p&gt;

&lt;p&gt;\(h_t\) modeling holiday effects&lt;/p&gt;

&lt;p&gt;\(x_t\) any extra regressors&lt;/p&gt;

&lt;p&gt;\(\epsilon\) normally distributed errors&lt;/p&gt;

&lt;p&gt;In this post, we will dive deep to understand trend, uncover the 2 options available and how they model trend differently. We will also learn about changepoints that allow the trend to change at specific points.&lt;/p&gt;

&lt;h2 id=&quot;what-is-trend-&quot;&gt;What is trend ?&lt;/h2&gt;
&lt;p&gt;When we say, we want to extract trend from the data, we essentially are looking to understand the overall trajectory of our time series. We want to know if the series has an &lt;span style=&quot;color:#ea9808;&quot;&gt;increasing&lt;/span&gt; or &lt;span style=&quot;color:#868686;&quot;&gt;decreasing&lt;/span&gt; trend.&lt;/p&gt;

&lt;p&gt;Here are 2 examples of trend.&lt;/p&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_21.svg&quot; /&gt;&lt;figcaption&gt;Fig1: Increasing Trend&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_22.svg&quot; /&gt;&lt;figcaption&gt;Fig2: Decreasing Trend&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Trends are not always increasing or decreasing but they may also consist of changes at points in time. One of the ways trend can be calculated is by computing  &lt;span style=&quot;color:#ea9808;&quot;&gt;rolling mean&lt;/span&gt;. Below we have a weekly rolling mean and it’s able to follow the path of our series.&lt;/p&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_23.svg&quot; /&gt;&lt;figcaption&gt;Fig3: Trend estimated by weekly rolling mean&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;There are 2 ways that trend is calculated in Prophet via  &lt;span style=&quot;color:#ea9808;&quot;&gt;Linear&lt;/span&gt; and  &lt;span style=&quot;color:#ea9808;&quot;&gt;Logistic&lt;/span&gt; growth models. However, logistic growth has more bells and whistles, which makes it more interesting.&lt;/p&gt;

&lt;h2 id=&quot;logistic-growth&quot;&gt;Logistic growth&lt;/h2&gt;

&lt;p&gt;Logistic growth captures non-linear relationship i.e.  &lt;span style=&quot;color:#868686;&quot;&gt;trend can be curvy&lt;/span&gt; and it is also possible to decide saturation values at some defined points.&lt;/p&gt;

&lt;p&gt;You might ask what do we mean by  &lt;span style=&quot;color:#ea9808;&quot;&gt;saturation&lt;/span&gt; ?&lt;/p&gt;

&lt;p&gt;Well, Imagine our company is providing internet services and we have been given a task to  &lt;span style=&quot;color:#ea9808;&quot;&gt;calculate trend&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:#868686;&quot;&gt;&lt;em&gt;What a dull exercise but let’s just stick with it for now&lt;/em&gt;!&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The sales is increasing but we can never out grow the population of the area thus our trend can never increase beyond this threshold, its simply a constraint for our business. This bound is called the  &lt;span style=&quot;color:#ea9808;&quot;&gt;carrying capacity \(C\)&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Population can grow and shrink with time as well, and thus with logistic growth model we can define the bounds of this growth. We could define it as a  &lt;span style=&quot;color:#868686;&quot;&gt;single value&lt;/span&gt; that remains constant for the entire timeseries or we may give different values for different points in time i.e.  &lt;span style=&quot;color:#ea9808;&quot;&gt;a vector containing different values&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Let’s now strip away the complexity and look at the basic form of logistic trend.&lt;/p&gt;

\[g_t = \frac{C}{1+exp(-k(t-m))}\]

&lt;p&gt;\(C\) is the carrying capacity i.e. bounds.&lt;/p&gt;

&lt;p&gt;\(k\) is the growth rate.&lt;/p&gt;

&lt;p&gt;\(m\) is an offset parameter.&lt;/p&gt;

&lt;p&gt;Here is how, we define it in code to get an intuition.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#defining a function
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;base_trend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;trend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trend&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#setting values
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the plot, you will observe that it’s saturating at \(c=1000\), with an offset at \(m=20\)  &lt;span style=&quot;color:#868686;&quot;&gt;(\(m\) allows the graph to move sideways)&lt;/span&gt;, \(k\) is the initial growth and it determines the curvature of the line.&lt;/p&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_24.svg&quot; /&gt;&lt;figcaption&gt;Fig4: Logistic Growth base form&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Let’s just plot another graph like the above but with different values and try to get an intuiton of what’s really happening here.&lt;/p&gt;

&lt;p&gt;We have changed the carrying capacity \(C\) from 1000 to 100,  &lt;span style=&quot;color:#ea9808;&quot;&gt;\(k\)&lt;/span&gt; is also changed to 5, which has resulted in a sudden increase in the function, its not as  &lt;span style=&quot;color:#ea9808;&quot;&gt;smooth as before&lt;/span&gt; and finally  &lt;span style=&quot;color:#868686;&quot;&gt;\(m\)&lt;/span&gt; has caused the graph to shift  &lt;span style=&quot;color:#868686;&quot;&gt;10 units to the left&lt;/span&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#setting values
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_25.svg&quot; /&gt;&lt;figcaption&gt;Fig5: Logistic Growth base form&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h3 id=&quot;changepoints&quot;&gt;Changepoints&lt;/h3&gt;

&lt;p&gt;In the growth function we can define dates where the trend is  &lt;span style=&quot;color:#ea9808;&quot;&gt;allowed to change&lt;/span&gt;, those dates are considered as   &lt;span style=&quot;color:#ea9808;&quot;&gt;changepoints&lt;/span&gt;. Before we look at the mathematical details, let’s just take a look at logistic growth model and plot changepoints.&lt;/p&gt;

&lt;p&gt;I have simulated some data and we can see the plot below, we notice it has an increasing trend.&lt;/p&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_26.svg&quot; /&gt;&lt;figcaption&gt;Fig6: Simulated Data&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;We will model this and focus on the fit and trend plot while setting seasonality to &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;, I will cover seasonality in detail in part 3.&lt;/p&gt;

&lt;p&gt;In this Prophet model we have set &lt;code class=&quot;highlighter-rouge&quot;&gt;growth= 'logistic'&lt;/code&gt;, but by default it’s always &lt;code class=&quot;highlighter-rouge&quot;&gt;linear&lt;/code&gt;. The logistic model needs &lt;code class=&quot;highlighter-rouge&quot;&gt;cap&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;floor&lt;/code&gt; values which define upper and lower bounds respectively.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#training a prophet model by specifying trend 
#i.e. growth function
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Prophet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;growth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'logistic'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;daily_seasonality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;weekly_seasonality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;yearly_seasonality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#defining bounds in the training data
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cap'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'floor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;future1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_future_dataframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;periods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#defining bounds in the testing  data
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cap'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;future1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'floor'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;forecast1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# plotting predictions
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forecast1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# plotting trend 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forecast1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here is the fit plot with the predictions, the black dotted lines are the bounds we had defined for trend.
Please know that these bounds are applied to the trend and not to the final predictions. However, they will have their affect on the predictions because trend is part of it, \(\hat Y_t  = g_t + s_t + h_t + x_t + \epsilon\).&lt;/p&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_27.svg&quot; /&gt;&lt;figcaption&gt;Fig7: fit plot with cap = 50&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In this trend plot you can see how  &lt;span style=&quot;color:#ea9808;&quot;&gt;cap at 50&lt;/span&gt; is restricting the trend, If I change the  &lt;span style=&quot;color:#868686;&quot;&gt;cap to 40&lt;/span&gt; you will see that trend behaves as if it is constrained not to go beyond 40. That’s the effect cap and floor have on trend in the logistic growth model (fig 7-9).&lt;/p&gt;
&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_28.svg&quot; /&gt;&lt;figcaption&gt;Fig8: trend plot with cap = 50&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_29.svg&quot; /&gt;&lt;figcaption&gt;Fig9: fit plot with cap = 40&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_210.svg&quot; /&gt;&lt;figcaption&gt;Fig10: trend plot with cap = 40&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Prophet identifies 25 changepoints automatically but by default it only does so for the first 80% of the data. As the user, you have the control to define your own changepoints and also be able control the regularisation &lt;span style=&quot;color:#868686;&quot;&gt;(using changepoint_prior_scale)&lt;/span&gt; applied to them.&lt;/p&gt;

&lt;p&gt;Thus, due to regularisation, even when 25 changepoints are considered many changepoint coefficient values is set to near 0. There are fewer than 25 dotted red lines on the plot that’s because only changepoints &amp;gt;0.01 are plotted.&lt;/p&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_211.svg&quot; /&gt;&lt;figcaption&gt;Fig11: changepoints&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;In the below barplot some of the cofficients arent visible on the scale as they are extremely small. We can confirm this if we run –&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt; m1.params['delta]&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;array([[ 1.54775876e-08, -4.61800548e-08, -1.00310960e-02,
        -1.18373641e-01, -7.67190921e-01, -1.06926880e+00,
        -1.06480754e+00, -8.54049563e-01, -5.53141018e-01,
        -2.51599717e-01, -5.78373085e-03, -2.55210307e-02,
        -8.98876919e-07, -1.09167994e-07,  1.41241899e-07,
        -4.73692876e-08,  1.44643672e-07,  1.10418832e-06,
         1.68632687e-02,  2.49719169e-03,  1.01259564e-03,
         4.11508165e-01,  9.30539618e-01,  1.37156022e+00,
         1.61753520e+00]])         
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_212.svg&quot; /&gt;&lt;figcaption&gt;Fig12: coefficient values for changepoints&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;When we consider the logistic growth function with the changepoints, the base formula can then be extended.&lt;/p&gt;

&lt;p&gt;We go from here \(g(t) = \frac{C}{1+exp(-k(t-m))}\) to&lt;/p&gt;

\[g(t) = \frac{C(t)}{1 + exp(-(k+a(t)^T \delta)(t-(m+a(t)^T\gamma)))}\]

&lt;p&gt;It’s easy to spot the differences between the 2. The final form consists of &lt;span style=&quot;color:#868686;&quot;&gt;2 main terms in the denominator&lt;/span&gt;, the right most term i.e. &lt;span style=&quot;color:#ea9808;&quot;&gt;\((t-(m+a(t)^T\gamma))\)&lt;/span&gt; is defined to make function continous, it’s the adjustment for the offset. However, it’s the previous term which is important especially &lt;span style=&quot;color:#ea9808;&quot;&gt;\(k + a(t)^T \delta\)&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The \(a(t)\) is the place where we define the changepoints and the \(\delta\) are the coefficient values that we extracted using &lt;code class=&quot;highlighter-rouge&quot;&gt;params&lt;/code&gt;. To conclude our discussion on changepoints, let’s just consider an example of how changepoints really work for a simple case.&lt;/p&gt;

&lt;p&gt;Let’s consider time t as a sequence 1 to 5 and consider we have 2 changepoints, one at &lt;span style=&quot;color:#ea9808;&quot;&gt;t=2&lt;/span&gt; and the other at &lt;span style=&quot;color:#ea9808;&quot;&gt;t=4&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;We then create &lt;span style=&quot;color:#ea9808;&quot;&gt;\(a(t)\)&lt;/span&gt; as a vector to define these &lt;span style=&quot;color:#ea9808;&quot;&gt;changepoints&lt;/span&gt;. Since we have 2 changepoints we have columns for the vector \(a(t)\).&lt;/p&gt;

&lt;p&gt;We then say that the first changepoint occurs at t=2 and we set that to &lt;span style=&quot;color:#ea9808;&quot;&gt;1&lt;/span&gt; till the end of the series. Similarly we set the second changepoint to &lt;span style=&quot;color:#ea9808;&quot;&gt;1&lt;/span&gt; at t=4 and in this way we create a vector that defines our 2 changepoints.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; a(1)  =  [0,0] 
 a(2)  =  [1,0] 
 a(3)  =  [1,0] 
 a(4)  =  [1,1] 
 a(5)  =  [1,1] 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\(\delta\) is a vector that is the amount the slope changes at each of the changepoints. So &lt;code class=&quot;highlighter-rouge&quot;&gt;delta=[5, 10]&lt;/code&gt; means that at the &lt;span style=&quot;color:#868686;&quot;&gt;first changepoint the slope increases by 5&lt;/span&gt;, and at the &lt;span style=&quot;color:#ea9808;&quot;&gt;second it increases by 10&lt;/span&gt;. k is the initial slope, before any changepoints.&lt;/p&gt;

&lt;p&gt;If we set k=2 and then consider calculating &lt;span style=&quot;color:#ea9808;&quot;&gt;\(k + a(t)^T \delta\)&lt;/span&gt;, use the matrix and values from above. We then have the following&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;t=1: slope is 2 + 0 * 5 + 0 * 10 = 2  # The initial slope
t=2: slope is 2 + 1 * 5 + 0 * 10 = 7  # At the first changepoint, slope increased by 5
t=3: slope is 2 + 1 * 5 + 0 * 10 = 7 
t=4: slope is 2 + 1 * 5 + 1 * 10 = 17  # At the second changepoint, slope increased by 10 more
t=5: slope is 2 + 1 * 5 + 1 * 10 = 17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is how we can calculate logistic trend with changepoints. Linear growth is simpler than this and we discuss it next.&lt;/p&gt;

&lt;h2 id=&quot;linear-growth&quot;&gt;Linear growth&lt;/h2&gt;

&lt;p&gt;Now that we have understood logistic trend, linear trend becomes fairly simple. The formula for linear growth  should look very similar to logisitc growth but linear trend is linear (see the graph below) and doesnt allow for any trend bounds i.e. carrying capacity. It is defined as below.&lt;/p&gt;

\[g(t) = (k + a(t)^T \delta)t + (m + a(t)^T\gamma)\]

&lt;p&gt;We can run a simple linear growth model as below, the &lt;code class=&quot;highlighter-rouge&quot;&gt;changepoint_prior_scale&lt;/code&gt; is a parameter you may use control regularisation, I would encourage you to play with it with your own datasets.&lt;/p&gt;

&lt;p&gt;Essentially, increasing it will make you trend more flexible and reducing it would decrease the flexibility; by default it is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;0.05&lt;/code&gt;. However, this should be used with caution since more flexibility would mean overfitting the training data and thus poor generalisation.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Prophet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;growth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'linear'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daily_seasonality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;weekly_seasonality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;yearly_seasonality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changepoint_prior_scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;future3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_future_dataframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;periods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;forecast3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_213.svg&quot; /&gt;&lt;figcaption&gt;Fig12: linear fit plot&lt;/figcaption&gt;&lt;/figure&gt;

&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_214.svg&quot; /&gt;&lt;figcaption&gt;Fig12: linear trend&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;key-takeaways&quot;&gt;Key takeaways&lt;/h2&gt;

&lt;p&gt;In this post, we have learned not only, how to run trend models in Prophet but  &lt;span style=&quot;color:#ea9808;&quot;&gt;how to think about them&lt;/span&gt;. We looked at how prophet considers changepoints and regularisation when calculating trend. We  &lt;span style=&quot;color:#ea9808;&quot;&gt;examined&lt;/span&gt; various graphs and equations. We also calculated trend in an example setting to see  &lt;span style=&quot;color:#868686;&quot;&gt;“how it works under the hood”&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;In this effort to introduce time series using prophet, I have started to maintain a repository at GitHub, by no means it’s complete. However here is the &lt;a href=&quot;https://github.com/shoaibkhanz/fbprophet_case_studies&quot;&gt;link&lt;/a&gt; to the notebooks.&lt;/p&gt;

&lt;p&gt;I hope you found this useful and as always,  &lt;span style=&quot;color:#ea9808;&quot;&gt;Happy Forecasting !&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;References:
&lt;a href=&quot;https://github.com/facebook/prophet/issues/1289&quot;&gt;https://github.com/facebook/prophet/issues/1289&lt;/a&gt;
&lt;a href=&quot;https://facebook.github.io/prophet/&quot;&gt;https://facebook.github.io/prophet/&lt;/a&gt;
&lt;a href=&quot;https://peerj.com/preprints/3190/&quot;&gt;https://peerj.com/preprints/3190/&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 30 May 2020 22:00:00 -0400</pubDate>
        <link>/articles/20/Time-Series-Forecasting-using-Prophet-part2</link>
        <guid isPermaLink="true">/articles/20/Time-Series-Forecasting-using-Prophet-part2</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Time-Series Forecasting using Prophet- part1</title>
        <description>&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_12.svg&quot; /&gt;&lt;figcaption&gt;Prophet&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;&lt;span style=&quot;color:#868686;&quot;&gt; Prophet&lt;/span&gt;&lt;/span&gt;  is a time-series forecasting library by &lt;span style=&quot;color:#ea9808;&quot;&gt; facebook&lt;/span&gt; and it’s available in Python and in R. It is simple to use and requires very little classical time-series experience, for e.g. ARIMA, SARIMA etc. Thus, you can start &lt;span style=&quot;color:#868686;&quot;&gt;building models quickly&lt;/span&gt;, &lt;span style=&quot;color:#868686;&quot;&gt;get good results&lt;/span&gt; and &lt;span style=&quot;color:#868686;&quot;&gt;become effective&lt;/span&gt; in no time. Considering this, prophet has become a popular library for time-series applications.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;A model in prophet is defined by the following equation. 
This form is called general additive model, since we adding results from each of the components to get our prediction.&lt;/p&gt;

\[\hat Y_t  = g_t + s_t + h_t + x_t + \epsilon\]

&lt;p&gt;\(\hat Y_t\)  is the predictions.&lt;/p&gt;

&lt;p&gt;\(g_t\) stands for growth model i.e. trend (logistic/linear)&lt;/p&gt;

&lt;p&gt;\(s_t\) model seasonality using Fourier series&lt;/p&gt;

&lt;p&gt;\(h_t\) modeling holiday effects&lt;/p&gt;

&lt;p&gt;\(x_t\) any extra regressors&lt;/p&gt;

&lt;p&gt;\(\epsilon\) normally distributed errors&lt;/p&gt;

&lt;h2 id=&quot;what-is-this-post-about-&quot;&gt;What is this post about ?&lt;/h2&gt;
&lt;p&gt;In this first post on prophet ,my objective is simply to get you started with &lt;span style=&quot;color:#ea9808;&quot;&gt; forecasting&lt;/span&gt;. I aim to cover the very basic to get you off the ground. In this series of posts, the aim is to cover all the features of prophet in parts. We will explore under-the-hood mathematics that defines prophet and tinker with how it’s applied in code. For now, I will make sure that after reading this you know enough to get your first time-series model up and running.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:#868686;&quot;&gt; All the code required to run the model is available on GitHub&lt;/span&gt; &lt;a href=&quot;https://github.com/shoaibkhanz/fbprophet_case_studies/tree/master/Part1&quot;&gt;&lt;span style=&quot;color:#ea9808;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;dataset&quot;&gt;Dataset&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;color:#ea9808;&quot;&gt;Time-series data is where the values are recorded sequentially with respect to time&lt;/span&gt;, for e.g. temperature data or health tracker data etc. For this post, we will model maximum temperature data for Sydney, Australia between the years 2013-2017 and we want to forecast it another year. This data has a strong seasonal pattern with a weak trend (Fig1). If at this point you are wondering what do we mean by seasonality and trend then you must read &lt;a href=&quot;https://otexts.com/fpp3/tspatterns.html&quot;&gt;time-series patterns by rob hyndman&lt;/a&gt; before reading any further.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-to-explore-and-forecast&quot;&gt;Setting up to explore and forecast&lt;/h2&gt;

&lt;p&gt;We want to set up our environment with libraries that we would need for this forecasting exercise.
So, we install the necessary packages below.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Importing the libraries
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#for data manipulation
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#for plotting
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fbprophet&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Prophet&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#for forecasting
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then read our data which is stored as a &lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt;.
This data contains around 24 variables but we are interested in 2 variables &lt;span style=&quot;color:#DC143C;&quot;&gt;MaxTemp&lt;/span&gt; since its the target and the &lt;span style=&quot;color:#ea9808;&quot;&gt;Date&lt;/span&gt; variable as it’s the primary time sequence. Prophet requires the date variable to be set as a &lt;span style=&quot;color:#ea9808;&quot;&gt;datetime&lt;/span&gt; object and so we must convert it so. However, the interesting thing here is that we must name our date variable as &lt;span style=&quot;color:#ea9808;&quot;&gt;ds&lt;/span&gt; and the target variable as &lt;span style=&quot;color:#DC143C;&quot;&gt;y&lt;/span&gt;, this is how prophet expects  them to be.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# reading a csv
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'../datasets/ausraindata.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# converting the string to datetime object
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ds'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# creating a new variable y 
# i.e. target variable, same as MaxTemp
# If you wanted to, you could rename it as well.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MaxTemp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The data contains temperature values for many locations across Australia, We are going to filter, select on Sydney, and extract data from 2013 onwards.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# filtering the data by 2 conditions
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Location'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sydney'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ds'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),:]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# selecting the required variables
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ds'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we feel the need to plot the time-series to understand how the maximum temperature (&lt;span style=&quot;color:#868686;&quot;&gt;measured in Celsius degrees&lt;/span&gt;) has been across these years. We observe that it has peaks and valleys which we should expect as the temperature drops during winters and increases back up during summers. Thus, it’s seasonal and we should expect the model to detect this pattern.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#plotting the time-series
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ds'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'y'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Max Temperature in Sydney from 2013-2017'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_11.svg&quot; /&gt;&lt;figcaption&gt;Fig1: Plotting daily time-series of Max Temperature in Sydney,Australia&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;fitting-a-prophet-model&quot;&gt;Fitting a Prophet model&lt;/h2&gt;

&lt;p&gt;We have the data ready containing only 2 variables i.e. &lt;span style=&quot;color:#ea9808;&quot;&gt;ds&lt;/span&gt; and &lt;span style=&quot;color:#ea9808;&quot;&gt;y&lt;/span&gt; and this is sufficient to build our very basic prophet model.
The first step is to instantiate the model by calling Prophet class and define seasonality. &lt;label for=&quot;1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;1&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;although we are just defining seasonality there are many default options that get chosen for us. e.g. by default seasonality mode is always &lt;code class=&quot;highlighter-rouge&quot;&gt;additive&lt;/code&gt; but we could change it to multiplicative if required. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;After creating the &lt;code class=&quot;highlighter-rouge&quot;&gt;m1&lt;/code&gt; object we fit it to the data. Once, we have completed this step successfully, we must create a forecasting dataframe with future dates using the &lt;code class=&quot;highlighter-rouge&quot;&gt;make_future_dataframe&lt;/code&gt; method. We use &lt;code class=&quot;highlighter-rouge&quot;&gt;periods&lt;/code&gt; to define the length of the forecasting dates and then simply predict. Now the &lt;code class=&quot;highlighter-rouge&quot;&gt;forecast1&lt;/code&gt; dataframe contains train and test data along with the forecast values called &lt;code class=&quot;highlighter-rouge&quot;&gt;yhat&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# training a prophet model 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Prophet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;daily_seasonality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;weekly_seasonality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
              &lt;span class=&quot;n&quot;&gt;yearly_seasonality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;future1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_future_dataframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;periods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;forecast1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;forecast1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:#868686;&quot;&gt;forecast1&lt;/span&gt; dataframe multiple variables but the key variables we focus for now are &lt;span style=&quot;color:#ea9808;&quot;&gt;ds,trend,weekly,yearly and yhat&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;\(\hat Y =\) trend + weekly + yearly&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ds&lt;/th&gt;
      &lt;th&gt;trend&lt;/th&gt;
      &lt;th&gt;weekly&lt;/th&gt;
      &lt;th&gt;yearly&lt;/th&gt;
      &lt;th&gt;yhat&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-06-21&lt;/td&gt;
      &lt;td&gt;24.032494&lt;/td&gt;
      &lt;td&gt;0.156514&lt;/td&gt;
      &lt;td&gt;-5.219729&lt;/td&gt;
      &lt;td&gt;18.969280&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-06-22&lt;/td&gt;
      &lt;td&gt;24.032998&lt;/td&gt;
      &lt;td&gt;0.007727&lt;/td&gt;
      &lt;td&gt;-5.289494&lt;/td&gt;
      &lt;td&gt;18.751232&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-06-23&lt;/td&gt;
      &lt;td&gt;24.033502&lt;/td&gt;
      &lt;td&gt;-0.059232&lt;/td&gt;
      &lt;td&gt;-5.356488&lt;/td&gt;
      &lt;td&gt;18.617783&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-06-24&lt;/td&gt;
      &lt;td&gt;24.034006&lt;/td&gt;
      &lt;td&gt;-0.119039&lt;/td&gt;
      &lt;td&gt;-5.420102&lt;/td&gt;
      &lt;td&gt;18.494865&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2018-06-25&lt;/td&gt;
      &lt;td&gt;24.034510&lt;/td&gt;
      &lt;td&gt;-0.024526&lt;/td&gt;
      &lt;td&gt;-5.479695&lt;/td&gt;
      &lt;td&gt;18.530289&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;predictions-trend-and-seasonality&quot;&gt;Predictions, Trend and Seasonality&lt;/h2&gt;

&lt;p&gt;Prophet provides some useful functions to plot data. there are 2 backends avaiable &lt;code class=&quot;highlighter-rouge&quot;&gt;plotly&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;matplotlib&lt;/code&gt;. We use matplotlib to plot the predictions. The function plots 95% confidence intervals as well. The &lt;span style=&quot;color:#ea9808;&quot;&gt;predicitons&lt;/span&gt; are plotted as a &lt;span style=&quot;color:#ea9808;&quot;&gt;line&lt;/span&gt; and the &lt;span style=&quot;color:#868686;&quot;&gt;actuals&lt;/span&gt; as &lt;span style=&quot;color:#868686;&quot;&gt;points&lt;/span&gt;. You could easily plot it yourself if you plotted the &lt;code class=&quot;highlighter-rouge&quot;&gt;yhat&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;forecast1&lt;/code&gt; dataframe.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# plots the predictions
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forecast1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_12.svg&quot; /&gt;&lt;figcaption&gt;Fig2: Plotting predictions&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;If we now wanted to plot &lt;span style=&quot;color:#ea9808;&quot;&gt;trend&lt;/span&gt; and &lt;span style=&quot;color:#ea9808;&quot;&gt;seasonality&lt;/span&gt; from the model we could easily do so by calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;plot_components&lt;/code&gt; method. We notice that Tuesdays and Thursdays are hotter than others and the values are relatively extremely small, this may suggest that this may not be significant. Interestingly, due to the location of australia, the weather is very different compared to other parts of the world. We observe in the yearly seasonality plot that July is the coldest while December is the hottest.  &lt;label for=&quot;2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;2&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This is also apparent if we compare yearly seasonality with Fig1 &lt;/span&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# plots the trend and seasonality
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forecast1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;figure class=&quot;fullwidth&quot;&gt;&lt;img src=&quot;/assets/img/fb_prophet_13.svg&quot; /&gt;&lt;figcaption&gt;Fig3: Plotting Trend and Seasonality (weekly &amp;amp; yearly)&lt;/figcaption&gt;&lt;/figure&gt;

&lt;h2 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;/h2&gt;

&lt;p&gt;I hope after reading this post you are confident to run your basic prophet model and make forecasts about them.
Now there is a lot that I haven’t covered here e.g.&lt;/p&gt;

&lt;p&gt;1.) What are changepoints?&lt;/p&gt;

&lt;p&gt;2.) What do we mean by logistic and linear trend?&lt;/p&gt;

&lt;p&gt;3.) How is seasonality calculated (Fourier series)?&lt;/p&gt;

&lt;p&gt;4.) Time-series cross-validation and performance metrics etc.&lt;/p&gt;

&lt;p&gt;5.) How do you boost model performance?&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:#868686;&quot;&gt;Future posts in this series&lt;/span&gt; will help answer all these questions. My goal for this one was to get you started without making you feel overwhelmed with the features. Once again, all the code is stored &lt;a href=&quot;https://github.com/shoaibkhanz/fbprophet_case_studies/tree/master/Part1&quot;&gt;&lt;span style=&quot;color:#ea9808;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;, there is also a &lt;code class=&quot;highlighter-rouge&quot;&gt;utils.py&lt;/code&gt; file in the project that gives the appearance of the charts.&lt;/p&gt;

&lt;p&gt;Let me know in the comments, if you found this post helpful or you find yourself full of doubts.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 May 2020 22:00:00 -0400</pubDate>
        <link>/articles/20/Time-Series-Forecasting-using-Prophet-part1</link>
        <guid isPermaLink="true">/articles/20/Time-Series-Forecasting-using-Prophet-part1</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Adaptive models during COVID-19</title>
        <description>&lt;p&gt;&lt;span style=&quot;color:#868686;&quot;&gt;COVID-19&lt;/span&gt; has derailed many aspects of life, and it’s hard to adapt. However, to survive we must. The story is hardly different when we look at our mathematical models, many good models have come crashing down as they failed to adjust to sudden fluctuations in the data. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;You might find yourself in 2 situations. Either you are now building a  &lt;span style=&quot;color:#868686;&quot;&gt; short-term model&lt;/span&gt; with extremely limited data or you are now on a look out for a solution.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-fix-&quot;&gt;What’s the Fix ?&lt;/h2&gt;

&lt;p&gt;My use-case is centred around determining price elasticity of customers and I have used a simple &lt;span style=&quot;color:#ea9808;&quot;&gt;log-log linear regression&lt;/span&gt; model to model this. The log-log structure helps me translate my coefficient values as percentages. If you want to understand this better, here is a ucla &lt;a style=&quot;color:#ea9808;&quot; href=&quot;https://stats.idre.ucla.edu/other/mult-pkg/faq/general/faqhow-do-i-interpret-a-regression-model-when-some-variables-are-log-transformed/&quot;&gt;link&lt;/a&gt; that explains it with few examples.&lt;/p&gt;

&lt;p&gt;This adaptive fix is a &lt;span style=&quot;color:#ea9808;&quot;&gt; 6 step process&lt;/span&gt; based on linear regression but I believe can be extended to other models as well.&lt;/p&gt;

&lt;p&gt;Step1: Fit a Linear Regression model.&lt;/p&gt;

&lt;p&gt;Step2: Calculate the Errors.&lt;/p&gt;

&lt;p&gt;Step3: Calculate a rolling mean of 2 or 3 or 4 weeks. &lt;label for=&quot;1&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;1&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;The choice of week depends on the use case. However, if the shock is recent then smaller the number the better (starting with at least 2 points) &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Step4: Lag the calculated mean by 1 or 2 weeks &lt;label for=&quot;2&quot; class=&quot;margin-toggle sidenote-number&quot;&gt;&lt;/label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;2&quot; class=&quot;margin-toggle&quot; /&gt;&lt;span class=&quot;sidenote&quot;&gt;This depends on the use case as well. The lag here can be interpreted as how soon the model is informed about the errors &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Step5: Convert NAs to 0.&lt;/p&gt;

&lt;p&gt;Step6: Add the error mean to the Step1.&lt;/p&gt;

&lt;p&gt;I have my models written in R and below is the code which implements all the 6 steps mentioned above. This can easily be written in any language.&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;div class=&quot;language-r highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_error&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_actual&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_preds_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_error&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_actual&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_preds_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_preds_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_preds_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as.vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollmean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_preds_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_preds_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as.vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollmean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;what-have-we-implemented-&quot;&gt;What have we implemented ?&lt;/h2&gt;

&lt;p&gt;First, we must realise the caveat i.e. this solution works when we are predicting &lt;span style=&quot;color:#ea9808;&quot;&gt;continuous&lt;/span&gt; values and it’s not for &lt;span style=&quot;color:#868686;&quot;&gt;classification&lt;/span&gt; models.&lt;/p&gt;

&lt;p&gt;In this solution we have combined the idea of moving average (Time series) with linear regression, very similar to ARIMAX but not exactly. Also, the way we have implemented this implies, that we are modifying the intercept (Step6). The reason this improves the model is because we are always learning from the most recent errors.&lt;/p&gt;

&lt;p&gt;If you have found this solution useful or need some clarification, please  do let me know in your comments.&lt;/p&gt;

</description>
        <pubDate>Fri, 17 Apr 2020 00:00:00 -0400</pubDate>
        <link>/articles/20/Adaptive-models-during-COVID-19</link>
        <guid isPermaLink="true">/articles/20/Adaptive-models-during-COVID-19</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Why ECDF is better than a Histogram</title>
        <description>&lt;p&gt;If you have never heard of &lt;b style=&quot;color: #ea9808&quot;&gt;binning bias&lt;/b&gt; then you could be using histograms and drawing &lt;b style=&quot;color: #868686&quot;&gt;incorrect&lt;/b&gt; conclusions. Please read my original post on &lt;a style=&quot;color: #ea9808&quot; href=&quot;https://medium.com/convergeml/why-ecdf-is-better-than-a-histogram-85deda4129ed&quot;&gt;Medium&lt;/a&gt; and it will help you avoid those mistakes.&lt;/p&gt;

&lt;!--more--&gt;
</description>
        <pubDate>Sun, 20 Jan 2019 19:00:00 -0500</pubDate>
        <link>/articles/19/Why-ECDF-is-better-than-a-Histogram</link>
        <guid isPermaLink="true">/articles/19/Why-ECDF-is-better-than-a-Histogram</guid>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Conundrums of the Confusion Matrix</title>
        <description>&lt;p&gt;Its extremely important to understand your model’s performance. In this post, I explain fundamental metrics such as &lt;span style=&quot;color:#ea9808;&quot;&gt;precision, recall, accuracy, error rate&lt;/span&gt; etc.. these metrics help us evaluate all types of classification models e.g. &lt;b style=&quot;color: #868686&quot;&gt;logistic regression, random forest, neural network&lt;/b&gt; etc.
I had written this &lt;a style=&quot;color: #ea9808&quot; href=&quot;https://medium.com/convergeml/conundrums-of-the-confusion-matrix-2fa82293707a&quot;&gt;post&lt;/a&gt; originally on Medium and its been appreciated by many for its simplicity and visuals.
&lt;!--more--&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Jan 2019 19:00:00 -0500</pubDate>
        <link>/articles/19/Conundrums-of-the-Confusion-Matrix</link>
        <guid isPermaLink="true">/articles/19/Conundrums-of-the-Confusion-Matrix</guid>
        
        
        <category>post</category>
        
      </item>
    
  </channel>
</rss>
